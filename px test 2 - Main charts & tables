<!DOCTYPE html>
<html>
<head>

<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/view-selector2.js"></script>
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/date-range-selector.js"></script>

<script>

gapi.analytics.ready(function() {


  /**
   * Create a new table to show most popular pages.
   */
  var topContent = {
    query: {
      metrics: 'ga:pageviews, ga:uniquePageviews, ga:timeOnPage, ga:bounces, ga:entrances, ga:exits',
      dimensions: 'ga:pagePath',
      sort: 'ga:pageviews'
    },
    chart: {
      container: 'top-content-container',
      type: 'TABLE',
      options: {
        width: '100%',
        title: 'Top content',
      }
    }
  };
  
   /**
   * Query params representing the chart's date range.
   */
  var dateRangeContent = {
    'start-date': '14daysAgo',
    'end-date': 'today'
  };

  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "content-container-2-view-container".
   */
  var contentViewSelector = new gapi.analytics.ext.ViewSelector2({
    container: 'content-container-2-view-selector',
  }).execute();

  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-content-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelectorContent = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-content-container'
  })
  .set(dateRangeContent).execute();

  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "content-container-custom".
   */
  var contentCustomChart = new gapi.analytics.googleCharts.DataChart(topContent)
     .set({query: dateRangeContent})
     .set({chart: {container: 'content-container-custom'}});

  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  contentViewSelector.on('viewChange', function(data) {
    contentCustomChart.set({query: {ids: data.ids}}).execute();

    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });

  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelectorContent.on('change', function(data) {
    contentCustomChart.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });





   /**
   * Creates a pie chart to show new vs existing, customisable by entering chosen date ranges
    */
   
  var pieChartCustomDate = {
    query: {
      metrics: 'ga:sessions',
      dimensions: 'ga:userType',
    },
    chart: {
    container: 'main-pie-chart-container',
      type: 'PIE',
      options: {
        width: '100%',
        title: 'New vs Existing visitors',
      }
    }
  };

  /**
   * Query params representing the first chart's date range.
   */
  var dateRangePie = {
    'start-date': '14daysAgo',
    'end-date': 'today'
  };

  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "pie-container-2-view-selector".
   */
  var viewSelectorPie = new gapi.analytics.ext.ViewSelector2({
    container: 'pie-container-2-view-selector',
  }).execute();

  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-pie-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelectorPie = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-pie-container'
  })
  .set(dateRangePie).execute();

  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "pie-chart-container-custom".
   */
  var pieCustomChart1 = new gapi.analytics.googleCharts.DataChart(pieChartCustomDate)
     .set({query: dateRangePie})
     .set({chart: {container: 'pie-chart-container-custom'}});

  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  viewSelectorPie.on('viewChange', function(data) {
    pieCustomChart1.set({query: {ids: data.ids}}).execute();

    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });

  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelectorPie.on('change', function(data) {
    pieCustomChart1.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });






  /**
   *  Creates a bar chart to show page views, customisable by entering chosen date ranges
   */
var pageViewCustomChart = {
    query: {
      metrics: 'ga:pageviews',
      dimensions: 'ga:date',
    },
    chart: {
      type: 'COLUMN',
      container: 'main-pageview-chart-container',
      options: {
        width: '100%',
         title: 'Page views per day',
      }
    }
  };
  
   /**
   * Query params representing the chart's date range.
   */
  var dateRangePageView = {
    'start-date': '14daysAgo',
    'end-date': 'today'
  };

  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "pageview-view-selector".
   */
  var viewSelectorPageViews = new gapi.analytics.ext.ViewSelector2({
    container: 'pageview-view-selector',
  }).execute();


  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-pageview-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelectorPageViews = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-pageview-container'
  })
  .set(dateRangePageView).execute();

  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "pageview-chart-container-custom".
   */
  var pageView1 = new gapi.analytics.googleCharts.DataChart(pageViewCustomChart)
     .set({query: dateRangePageView})
     .set({chart: {container: 'pageview-chart-container-custom'}});

  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  viewSelectorPageViews.on('viewChange', function(data) {
    pageView1.set({query: {ids: data.ids}}).execute();

    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });

  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelectorPageViews.on('change', function(data) {
    pageView1.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });






  /**
   *  Creates a bar chart for all goals completed, within a date range
   */
var goalBarChart = {
    query: {
      metrics: 'ga:goalCompletionsAll',
      dimensions: 'ga:pagePath',
      'sort': '-ga:goalCompletionsAll',
      'max-results': '10'
    
    },
    chart: {
      type: 'BAR',
      container: 'main-goal-chart-container',
     options: {
        width: '100%',
         title: 'Goals completed',
         
      }
    }
  };
  
  /**
   * Query params representing goal chart date range.
   */
  var dateRangeGoal = {
    'start-date': '14daysAgo',
    'end-date': 'today'
  };

  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "goal-view-selector".
   */
  var viewSelectorGoals = new gapi.analytics.ext.ViewSelector2({
    container: 'goal-view-selector',
  }).execute();

  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-goal-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelectorGoals = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-goal-container'
  })
  .set(dateRangeGoal).execute();

  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "goal-chart-container-custom".
   */
  var goal1 = new gapi.analytics.googleCharts.DataChart(goalBarChart)
     .set({query: dateRangeGoal})
     .set({chart: {container: 'goal-chart-container-custom'}});

  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  viewSelectorGoals.on('viewChange', function(data) {
    goal1.set({query: {ids: data.ids}}).execute();

    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });

  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelectorGoals.on('change', function(data) {
    goal1.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });





 /**
   *  Creates a table for landing page path, and their metrics such as goal 
   * conversion rate in %, and goal value per session $ 
   */
var keywordTable = {
    query: {
      metrics: 'ga:sessions, ga:organicSearches, ga:goalConversionRateAll, ga:goalValuePerSession',
      dimensions: 'ga:landingPagePath'
    },
    chart: {
      type: 'TABLE',
      container: 'main-seo-table-container',
     options: {
        width: '100%',
        }
    }
  };
  
  /**
   * Query params representing goal chart date range.
   */
  var dateRangeSeo = {
    'start-date': '14daysAgo',
    'end-date': 'today'
  };

  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "seo-view-selector".
   */
  var viewSelectorLandingPage = new gapi.analytics.ext.ViewSelector2({
    container: 'seo-view-selector',
  }).execute();

  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-seo-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelectorLandingPage = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-seo-container'
  })
  .set(dateRangeSeo).execute();

  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "goal-chart-container-custom".
   */
  var seo = new gapi.analytics.googleCharts.DataChart(keywordTable)
     .set({query: dateRangeSeo})
     .set({chart: {container: 'seo-table-container-custom'}});

  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  viewSelectorLandingPage.on('viewChange', function(data) {
    seo.set({query: {ids: data.ids}}).execute();

    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });

  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelectorLandingPage.on('change', function(data) {
    seo.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });




 
  /**
   *  Table to show keywords and their clicks - for paid ads (Adwords)
   */
var adClicks = {
    query: {
      metrics: 'ga:adClicks',
      dimensions: 'ga:keyword'
    },
    chart: {
      type: 'TABLE',
      container: 'main-landing-table-container',
     options: {
        width: '100%',
      }
    }
  };
  
  /**
   * Query params representing the chart's date range.
   */
  var dateRangeClicks = {
    'start-date': '14daysAgo',
    'end-date': 'today'
  };

  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "goal-view-selector".
   */
  var viewSelectorClicks = new gapi.analytics.ext.ViewSelector2({
    container: 'landing-view-selector',
  }).execute();

  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-goal-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelectorClicks = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-landing-container'
  })
  .set(dateRangeClicks).execute();

  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "goal-chart-container-custom".
   */
  var clicks = new gapi.analytics.googleCharts.DataChart(adClicks)
     .set({query: dateRangeClicks})
     .set({chart: {container: 'landing-table-container-custom'}});

  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  viewSelectorClicks.on('viewChange', function(data) {
    clicks.set({query: {ids: data.ids}}).execute();

    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });

  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelectorClicks.on('change', function(data) {
    clicks.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });






  /**
   *  Table to show search queries and their impressions, clicks, Click-through rate 
   *  For paid ads only (Adwords)
   */
var adQueries = {
    query: {
      metrics: 'ga:impressions, ga:adClicks, ga:CTR',
      dimensions: 'ga:adMatchedQuery'
    },
    chart: {
      type: 'TABLE',
      container: 'main-queries-table-container',
     options: {
        width: '100%',
      }
    }
  };
  
  /**
   * Query params representing goal chart date range.
   */
  var dateRangeQueries = {
    'start-date': '14daysAgo',
    'end-date': 'today'
  };

  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "goal-view-selector".
   */
  var viewSelectorQueries = new gapi.analytics.ext.ViewSelector2({
    container: 'query-view-selector',
  }).execute();

  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-goal-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelectorQueries = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-query-container'
  })
  .set(dateRangeQueries).execute();

  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "goal-chart-container-custom".
   */
  var queries = new gapi.analytics.googleCharts.DataChart(adQueries)
     .set({query: dateRangeQueries})
     .set({chart: {container: 'query-table-container-custom'}});

  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  viewSelectorQueries.on('viewChange', function(data) {
    queries.set({query: {ids: data.ids}}).execute();

    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });

  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelectorQueries.on('change', function(data) {
    queries.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });



});



    
    
</script>

</head>

<body>


<!--
    top content chart containers
-->
<section id="content-container-2-view-selector"></section>
<br>
<section id="top-content-container"></section>
<br>
<section id="date-range-content-container"></section>
<br>
<section id="content-container-custom"></section>
<br>

<!--
    pie chart containers
-->
<section id="pie-container-2-view-selector"></section>
<br>
<section id="main-pie-chart-container"></section>
<br>
<section id="date-range-pie-container"></section>
<br>
<section id="pie-chart-container-custom"></section>
<br>
<!--
    page view containers
-->
<section id="pageview-view-selector"></section>
<br>
<section id="main-pageview-chart-container"></section>
<br>
<section id="date-range-pageview-container"></section>
<br>
<section id="pageview-chart-container-custom"></section>
<br>
<!--
    goals chart containers
-->
<section id="goal-view-selector"></section>
<br>
<section id="main-goal-chart-container"></section>
<br>
<section id="date-range-goal-container"></section>
<br>
<section id="goal-chart-container-custom"></section>
<br>
<!--
    SEO Query containers
-->
<section id="seo-view-selector"></section>
<br>
<section id="main-seo-table-container"></section>
<br>
<section id="date-range-seo-container"></section>
<br>
<section id="seo-table-container-custom"></section>
<br>
<!--
    landing page data containers
-->
<section id="landing-view-selector"></section>
<br>
<section id="main-landing-table-container"></section>
<br>
<section id="date-range-landing-container"></section>
<br>
<section id="landing-table-container-custom"></section>
<br>

<!--
    query data containers
-->

<section id="query-view-selector"></section>
<br>
<section id="main-queries-table-container"></section>
<br>
<section id="date-range-query-container"></section>
<br>
<section id="query-table-container-custom"></section>
<br>
</body>

</html>



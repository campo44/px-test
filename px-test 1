// The following code loads the Embed API library and generates the charts, graphs and tables.


(function(w,d,s,g,js,fjs){
  g=w.gapi||(w.gapi={});g.analytics={q:[],ready:function(cb){this.q.push(cb)}};
  js=d.createElement(s);fjs=d.getElementsByTagName(s)[0];
  js.src='https://apis.google.com/js/platform.js';
  fjs.parentNode.insertBefore(js,fjs);js.onload=function(){g.load('analytics')};
}(window,document,'script'));

//alex added
/**
 * <!-- This demo uses the Chart.js graphing library and Moment.js to do date
     formatting and manipulation. -->
src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js"
src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js"

<!-- Include the ViewSelector2 component script. -->
src="/public/javascript/embed-api/components/view-selector2.js"

<!-- Include the DateRangeSelector component script. -->
src="/public/javascript/embed-api/components/date-range-selector.js"

<!-- Include the ActiveUsers component script. -->
src="/public/javascript/embed-api/components/active-users.js"
*/
///^^^alex added



gapi.analytics.ready(function() {

  // Step 1: Authorize the user.

  var CLIENT_ID = '571689297980-ur9bp6ab1aqn4g4k7bm0tpapvm4kn15k.apps.googleusercontent.com';

  gapi.analytics.auth.authorize({
    container: 'auth-button',
    clientid: CLIENT_ID,
  });

  // Step 2: Create the view selector.

  var viewSelector = new gapi.analytics.ViewSelector({
    container: 'view-selector'
  });

  // Step 3: Create the timeline chart.

  var timeline = new gapi.analytics.googleCharts.DataChart({
    reportType: 'ga',
    query: {
      'dimensions': 'ga:date',
      'metrics': 'ga:sessions',
      'start-date': '7daysAgo',
      'end-date': 'yesterday',
    },
    chart: {
      type: 'LINE',
      container: 'timeline'
      
    }
  });

  // Step 4: Hook up the components to work together.

  gapi.analytics.auth.on('success', function(response) {
    viewSelector.execute();
  });

  viewSelector.on('change', function(ids) {
    var newIds = {
      query: {
        ids: ids
      }
    }
    timeline.set(newIds).execute();
  });
  
 /**
   * Create a table chart showing top browsers for users to interact with.
   * Clicking on a row in the table will update a second timeline chart with
   * data from the selected browser.
   */
   
    // Step 5: Create the chart variable
    
    
  var mainChart = new gapi.analytics.googleCharts.DataChart({
    query: {
      'dimensions': 'ga:browser',
      'metrics': 'ga:sessions',
      'sort': '-ga:sessions',
      'max-results': '6'
    },
    chart: {
      type: 'TABLE',
      container: 'main-chart-container',
      options: {
        width: '100%'
      }
    }
  });


  /**
   * Create a timeline chart showing sessions over time for the browser the
   * user selected in the main chart.
   */
  var breakdownChart = new gapi.analytics.googleCharts.DataChart({
    query: {
      'dimensions': 'ga:date',
      'metrics': 'ga:sessions',
      'start-date': '7daysAgo',
      'end-date': 'yesterday'
    },
    chart: {
      type: 'LINE',
      container: 'breakdown-chart-container',
      options: {
        width: '100%'
      }
    }
  });


  /**
   * Store a refernce to the row click listener variable so it can be
   * removed later to prevent leaking memory when the chart instance is
   * replaced.
   */
  var mainChartRowClickListener;


  /**
   * Update both charts whenever the selected view changes.
   */
  viewSelector.on('change', function(ids) {
    var options = {query: {ids: ids}};

    // Clean up any event listeners registered on the main chart before
    // rendering a new one.
    if (mainChartRowClickListener) {
      google.visualization.events.removeListener(mainChartRowClickListener);
    }

    mainChart.set(options).execute();
    breakdownChart.set(options);

    // Only render the breakdown chart if a browser filter has been set.
    if (breakdownChart.get().query.filters) breakdownChart.execute();
  });


  /**
   * Each time the main chart is rendered, add an event listener to it so
   * that when the user clicks on a row, the line chart is updated with
   * the data from the browser in the clicked row.
   */
  mainChart.on('success', function(response) {

    var chart = response.chart;
    var dataTable = response.dataTable;

    // Store a reference to this listener so it can be cleaned up later.
    mainChartRowClickListener = google.visualization.events
        .addListener(chart, 'select', function(event) {

      // When you unselect a row, the "select" event still fires
      // but the selection is empty. Ignore that case.
      if (!chart.getSelection().length) return;

      var row =  chart.getSelection()[0].row;
      var browser =  dataTable.getValue(row, 0);
      var options = {
        query: {
          filters: 'ga:browser==' + browser
        },
        chart: {
          options: {
            title: browser
          }
        }
      };

      breakdownChart.set(options).execute();
    });
  });
  

  /** 
   * Creating a table to display user sessions and total pageviews over
   * the last 7 days
   */  
      
  var timeline3 = new gapi.analytics.googleCharts.DataChart({
    reportType: 'ga',
    query: {
        'dimension': 'ga:date',
      'metrics': 'ga:pageviews, ga:sessions',
      'start-date': '7daysAgo',
      'end-date': 'yesterday',
    },
    chart: {
      type: 'TABLE',
      container: 'timeline3'
      
    }
  });


 // Step 6: Set the container of the particular chart to execute
 
 
  // Set the chart to execute on page.

   viewSelector.on('change', function(ids) {
    var newIds = {
      query: {
        ids: ids
      }
    }
    timeline3.set(newIds).execute();
  });
  
 


    /**
   * Create a new pieChart to show new vs returning users".
   */
  var pieChart = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:sessions',
      dimensions: 'ga:userType',
      'start-date': '30daysAgo',
      'end-date': 'yesterday'
    },
    chart: {
      container: 'pie-container',
      type: 'PIE',
      options: {
        width: '100%'
      }
    }
  });
  
  
  /**
   * Render the dataChart on the page whenever a new view is selected.
   */
  viewSelector.on('change', function(ids) {
      var newIds = {
      query: {
        ids: ids
      }
    }
    pieChart.set(newIds).execute();
  });

  
  
  /**
   * Create a new table to show top content".
   */
  var topContent = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:pageviews, ga:uniquePageviews, ga:timeOnPage, ga:bounces, ga:entrances, ga:exits',
      dimensions: 'ga:pagePath',
      sort: 'ga:pageviews'
    },
    chart: {
      container: 'keyword-container',
      type: 'TABLE',
      options: {
        width: '100%'
      }
    }
  });
  
  /**
   * Render the dataChart on the page whenever a new view is selected.
   */
  viewSelector.on('change', function(ids) {
      var newIds = {
      query: {
        ids: ids
      }
    }
    topContent.set(newIds).execute();
  });
  
   
   
 /** 
  * Bar chart that displays sessions by country 
  */
   var countries = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:sessions',
      dimensions: 'ga:country',
    },
    chart: {
      container: 'country-container',
      type: 'BAR',
      options: {
        width: '100%'
      }
    }
  });
  
  viewSelector.on('change', function(ids) {
      var newIds = {
      query: {
        ids: ids
      }
    }
    countries.set(newIds).execute();
  }); 
   
 //alexaddedAS
 
  
});

  

<!DOCTYPE html>
<html>
<head>

<!-- First script in the head section contains the authorization code.
    Second script in the head section containts the JavaScript code that displays the charts and graphs.
    HTML containers are placed in the body to store each respective chart/graph.
-->

<!-- First script -->
<script>

  // Replace with your client ID from google developers console.
  var CLIENT_ID = '571689297980-ur9bp6ab1aqn4g4k7bm0tpapvm4kn15k.apps.googleusercontent.com';

 // Set authorized scope to your website 
  var SCOPES = ['http://px300579.enjin.com'];


  function authorize(event) {
    // Handles the authorization flow.
    // `immediate` should be false when invoked from the button click.
    var useImmdiate = event ? false : true;
    var authData = {
      client_id: CLIENT_ID,
      scope: SCOPES,
      immediate: useImmdiate
    };

    gapi.auth.authorize(authData, function(response) {
      var authButton = document.getElementById('auth-button');
      if (response.error) {
        authButton.hidden = false;
      }
      else {
        authButton.hidden = true;
        queryAccounts();
      }
    });
  }


function queryAccounts() {
  // Load the Google Analytics client library.
  gapi.client.load('analytics', 'v3').then(function() {

    // Get a list of all Google Analytics accounts for this user
    gapi.client.analytics.management.accounts.list().then(handleAccounts);
  });
}


function handleAccounts(response) {
  // Handles the response from the accounts list method.
  if (response.result.items && response.result.items.length) {
    // Get the first Google Analytics account.
    var firstAccountId = response.result.items[0].id;

    // Query for properties.
    queryProperties(firstAccountId);
  } else {
    console.log('No accounts found for this user.');
  }
}


function queryProperties(accountId) {
  // Get a list of all the properties for the account.
  gapi.client.analytics.management.webproperties.list(
      {'accountId': accountId})
    .then(handleProperties)
    .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });
}


function handleProperties(response) {
  // Handles the response from the webproperties list method.
  if (response.result.items && response.result.items.length) {

    // Get the first Google Analytics account
    var firstAccountId = response.result.items[0].accountId;

    // Get the first property ID
    var firstPropertyId = response.result.items[0].id;

    // Query for Views (Profiles).
    queryProfiles(firstAccountId, firstPropertyId);
  } else {
    console.log('No properties found for this user.');
  }
}


function queryProfiles(accountId, propertyId) {
  // Get a list of all Views (Profiles) for the first property
  // of the first Account.
  gapi.client.analytics.management.profiles.list({
      'accountId': accountId,
      'webPropertyId': propertyId
  })
  .then(handleProfiles)
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });
}


function handleProfiles(response) {
  // Handles the response from the profiles list method.
  if (response.result.items && response.result.items.length) {
    // Get the first View (Profile) ID.
    var firstProfileId = response.result.items[0].id;

    // Query the Core Reporting API.
    queryCoreReportingApi(firstProfileId);
  } else {
    console.log('No views (profiles) found for this user.');
  }
}


function queryCoreReportingApi(profileId) {
  // Query the Core Reporting API for the number sessions for
  // the past seven days.
  gapi.client.analytics.data.ga.get({
    'ids': 'ga:' + profileId,
    'start-date': '7daysAgo',
    'end-date': 'today',
    'metrics': 'ga:sessions'
  })
  .then(function(response) {
    var formattedJson = JSON.stringify(response.result, null, 2);
    document.getElementById('query-output').value = formattedJson;
  })
  .then(null, function(err) {
      // Log any errors.
      console.log(err);
  });
}

</script>

<script src="https://apis.google.com/js/client.js?onload=authorize"></script>











<!-- Second script
  The following code loads the Embed API library and generates the charts, graphs and tables.
-->
<script>
    


(function(w,d,s,g,js,fjs){
  g=w.gapi||(w.gapi={});g.analytics={q:[],ready:function(cb){this.q.push(cb)}};
  js=d.createElement(s);fjs=d.getElementsByTagName(s)[0];
  js.src='https://apis.google.com/js/platform.js';
  fjs.parentNode.insertBefore(js,fjs);js.onload=function(){g.load('analytics')};
}(window,document,'script'));

//alex added
/**
 * <!-- This demo uses the Chart.js graphing library and Moment.js to do date
     formatting and manipulation. -->
src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js"
src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js"

<!-- Include the ViewSelector2 component script. -->
src="/public/javascript/embed-api/components/view-selector2.js"

<!-- Include the DateRangeSelector component script. -->
src="/public/javascript/embed-api/components/date-range-selector.js"

<!-- Include the ActiveUsers component script. -->
src="/public/javascript/embed-api/components/active-users.js"
*/
///^^^alex added



gapi.analytics.ready(function() {

  // Step 1: Authorize the user.
  // Enter client ID from your google developers console
  var CLIENT_ID = '571689297980-ur9bp6ab1aqn4g4k7bm0tpapvm4kn15k.apps.googleusercontent.com';

  gapi.analytics.auth.authorize({
    container: 'auth-button',
    clientid: CLIENT_ID,
  });

  // Step 2: Create the view selector.

  var viewSelector = new gapi.analytics.ViewSelector({
    container: 'view-selector'
  });

  // Step 3: Create the timeline chart.

  var timeline = new gapi.analytics.googleCharts.DataChart({
    reportType: 'ga',
    query: {
      'dimensions': 'ga:date',
      'metrics': 'ga:sessions',
      'start-date': '7daysAgo',
      'end-date': 'yesterday',
    },
    chart: {
      type: 'LINE',
      container: 'timeline'
      
    }
  });

  // Step 4: Hook up the components to work together.

  gapi.analytics.auth.on('success', function(response) {
    viewSelector.execute();
  });

  viewSelector.on('change', function(ids) {
    var newIds = {
      query: {
        ids: ids
      }
    }
    timeline.set(newIds).execute();
  });
  
 /**
   * Create a table chart showing top browsers for users to interact with.
   * Clicking on a row in the table will update a second timeline chart with
   * data from the selected browser.
   */
   
    // Step 5: Create the chart variable
    
    
  var mainChart = new gapi.analytics.googleCharts.DataChart({
    query: {
      'dimensions': 'ga:browser',
      'metrics': 'ga:sessions',
      'sort': '-ga:sessions',
      'max-results': '6'
    },
    chart: {
      type: 'TABLE',
      container: 'main-chart-container',
      options: {
        width: '100%'
      }
    }
  });


  /**
   * Create a timeline chart showing sessions over time for the browser the
   * user selected in the main chart.
   */
  var breakdownChart = new gapi.analytics.googleCharts.DataChart({
    query: {
      'dimensions': 'ga:date',
      'metrics': 'ga:sessions',
      'start-date': '7daysAgo',
      'end-date': 'yesterday'
    },
    chart: {
      type: 'LINE',
      container: 'breakdown-chart-container',
      options: {
        width: '100%'
      }
    }
  });


  /**
   * Store a refernce to the row click listener variable so it can be
   * removed later to prevent leaking memory when the chart instance is
   * replaced.
   */
  var mainChartRowClickListener;


  /**
   * Update both charts whenever the selected view changes.
   */
  viewSelector.on('change', function(ids) {
    var options = {query: {ids: ids}};

    // Clean up any event listeners registered on the main chart before
    // rendering a new one.
    if (mainChartRowClickListener) {
      google.visualization.events.removeListener(mainChartRowClickListener);
    }

    mainChart.set(options).execute();
    breakdownChart.set(options);

    // Only render the breakdown chart if a browser filter has been set.
    if (breakdownChart.get().query.filters) breakdownChart.execute();
  });


  /**
   * Each time the main chart is rendered, add an event listener to it so
   * that when the user clicks on a row, the line chart is updated with
   * the data from the browser in the clicked row.
   */
  mainChart.on('success', function(response) {

    var chart = response.chart;
    var dataTable = response.dataTable;

    // Store a reference to this listener so it can be cleaned up later.
    mainChartRowClickListener = google.visualization.events
        .addListener(chart, 'select', function(event) {

      // When you unselect a row, the "select" event still fires
      // but the selection is empty. Ignore that case.
      if (!chart.getSelection().length) return;

      var row =  chart.getSelection()[0].row;
      var browser =  dataTable.getValue(row, 0);
      var options = {
        query: {
          filters: 'ga:browser==' + browser
        },
        chart: {
          options: {
            title: browser
          }
        }
      };

      breakdownChart.set(options).execute();
    });
  });
  

  /** 
   * Creating a table to display user sessions and total pageviews over
   * the last 7 days
   */  
      
  var timeline3 = new gapi.analytics.googleCharts.DataChart({
    reportType: 'ga',
    query: {
        'dimension': 'ga:date',
      'metrics': 'ga:pageviews, ga:sessions',
      'start-date': '7daysAgo',
      'end-date': 'yesterday',
    },
    chart: {
      type: 'BAR',
      container: 'timeline3',
      options: {
        width: '100%'
      }
      
    }
  });


 // Step 6: Set the container of the particular chart to execute
 
 
  // Set the chart to execute on page.

   viewSelector.on('change', function(ids) {
    var newIds = {
      query: {
        ids: ids
      }
    }
    timeline3.set(newIds).execute();
  });
  
 


    /**
   * Create a new DataChart to show new vs returning users".
   */
  var pieChart = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:sessions',
      dimensions: 'ga:userType',
      'start-date': '30daysAgo',
      'end-date': 'yesterday'
    },
    chart: {
      container: 'pie-container',
      type: 'PIE',
      options: {
        width: '100%'
      }
    }
  });
  
  
  /**
   * Render the dataChart on the page whenever a new view is selected.
   */
  viewSelector.on('change', function(ids) {
      var newIds = {
      query: {
        ids: ids
      }
    }
    pieChart.set(newIds).execute();
  });



  /**
   * Create a new table to show keywords used in search engine, sorted by sessions".
   */
  var topContent = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:pageviews, ga:uniquePageviews, ga:timeOnPage, ga:bounces, ga:entrances, ga:exits',
      dimensions: 'ga:pagePath',
      sort: 'ga:pageviews'
    },
    chart: {
      container: 'keyword-container',
      type: 'TABLE',
      options: {
        width: '100%'
      }
    }
  });
  
  /**
   * Render the dataChart on the page whenever a new view is selected.
   */
  viewSelector.on('change', function(ids) {
      var newIds = {
      query: {
        ids: ids
      }
    }
    topContent.set(newIds).execute();
  });

/**
 * Bar chart that displays sessions by countries
 */
 
   var countries = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:sessions',
      dimensions: 'ga:country',
    },
    chart: {
      container: 'country-container',
      type: 'BAR',
      options: {
        width: '100%'
      }
    }
  });
  
  /**
   * Render the dataChart on the page whenever a new view is selected.
   */
  viewSelector.on('change', function(ids) {
      var newIds = {
      query: {
        ids: ids
      }
    }
    countries.set(newIds).execute();
  }); 
   
 //alexaddedAS
 
});

</script>

</head>







<!-- HTML Containers to hold the charts/graphs -->
<body>

<h1>PX Prototype</h1>
<section id="auth-button"></section>
<p></p>
<section id="view-selector"></section>
<p></p>
<p>Sessions per day (past 7 days)</p>
<section id="timeline"></section>
<p><br /> </p>
<p>Browsers of users (past 7 days)</p>
<section id="main-chart-container"></section>
<section id="breakdown-chart-container"></section>
<p></p>
<p>Total page views (past 7 days)</p>
<section id="timeline3"></section>
<p></p>
<h1>PX Test 2 AS</h1>
<section id="chart-container"></section>
<section id="view-selector-container"></section>
<section id="embed-api-auth-container"></section>
<section id="data-chart-1-container"></section>
<section id="date-range-selector-1-container"></section>
<section id="data-chart-2-container"></section>
<section id="date-range-selector-2-container"></section>
<p></p>
<p>New vs Returning users (past 30 days)</p>
<section id="pie-container"></section>
<p></p>
<p>Top content</p>
<section id="keyword-container"></section>
<p></p>
<p>Countries</p>
<section id="country-container"></section>

</body>


</html>

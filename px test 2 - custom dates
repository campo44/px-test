<!DOCTYPE html>
<html>
<head>



<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/view-selector2.js"></script>
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/date-range-selector.js"></script>


<script>

gapi.analytics.ready(function() {




   /**
   * Creates a pie chart to show new vs existing, customisable by entering chosen date ranges
    */
   
  var pieChartCustomDate = {
    query: {
      metrics: 'ga:sessions',
      dimensions: 'ga:userType',
    },
    chart: {
    container: 'main-pie-chart-container',
      type: 'PIE',
      options: {
        width: '100%',
        title: 'New vs Existing visitors',
      }
    }
  };
  
  


  /**
   * Query params representing the first chart's date range.
   */
  var dateRangePie = {
    'start-date': '7daysAgo',
    'end-date': 'yesterday'
  };



  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "view-selector-container".
   */
  var viewSelector = new gapi.analytics.ext.ViewSelector2({
    container: 'pie-container-2-view-selector',
  }).execute();


  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-selector-1-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelector1 = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-pie-container'
  })
  .set(dateRangePie).execute();



  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "pie-chart-container-custom".
   */
  var pieCustomChart1 = new gapi.analytics.googleCharts.DataChart(pieChartCustomDate)
     .set({query: dateRangePie})
     .set({chart: {container: 'pie-chart-container-custom'}});





  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  viewSelector.on('viewChange', function(data) {
    pieCustomChart1.set({query: {ids: data.ids}}).execute();


    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });


  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelector1.on('change', function(data) {
    pieCustomChart1.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });


  /**
   *  Creates a bar chart to show page views, customisable by entering chosen date ranges
   */


var pageViewCustomChart = {
    query: {
      metrics: 'ga:pageviews',
      dimensions: 'ga:date',
    },
    chart: {
      type: 'COLUMN',
      container: 'main-pageview-chart-container',
      options: {
        width: '100%',
         title: 'Page views per day',
      }
    }
  };
  
  


  /**
   * Query params representing the first chart's date range.
   */
  var dateRangePageView = {
    'start-date': '7daysAgo',
    'end-date': 'yesterday'
  };

  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "pageview-view-selector".
   */
  var viewSelector2 = new gapi.analytics.ext.ViewSelector2({
    container: 'pageview-view-selector',
  }).execute();


  /**
   * Create a new DateRangeSelector instance to be rendered inside of an
   * element with the id "date-range-pageview-container", set its date range
   * and then render it to the page.
   */
  var dateRangeSelector2 = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-pageview-container'
  })
  .set(dateRangePageView).execute();



  /**
   * Create a new DataChart instance with the given query parameters
   * and Google chart options. It will be rendered inside an element
   * with the id "pageview-chart-container-custom".
   */
  var pageView1 = new gapi.analytics.googleCharts.DataChart(pageViewCustomChart)
     .set({query: dateRangePageView})
     .set({chart: {container: 'pageview-chart-container-custom'}});





  /**
   * Register a handler to run whenever the user changes the view.
   * The handler will update both dataCharts as well as updating the title
   * of the dashboard.
   */
  viewSelector2.on('viewChange', function(data) {
    pageView1.set({query: {ids: data.ids}}).execute();


    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';
  });


  /**
   * Register a handler to run whenever the user changes the date range from
   * the first datepicker. The handler will update the first dataChart
   * instance as well as change the dashboard subtitle to reflect the range.
   */
  dateRangeSelector2.on('change', function(data) {
    pageView1.set({query: data}).execute();

    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });



 

});
    
    
</script>







</head>




<body>



<section id="pie-container-2-view-selector"></section>
<br>
<section id="main-pie-chart-container"></section>
<br>
<section id="date-range-pie-container"></section>
<br>
<section id="pie-chart-container-custom"></section>
<br>

<section id="pageview-view-selector"></section>
<br>
<section id="main-pageview-chart-container"></section>
<br>
<section id="date-range-pageview-container"></section>
<br>
<section id="pageview-chart-container-custom"></section>
<br>




</body>


</html>


